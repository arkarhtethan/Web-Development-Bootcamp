Generic Notes
- HTML files - Structure of your website (builders)
- CSS files - stylesheet of your website (painters)
- javascript files - functionality of your website (electricians / plumbers)
- Wireframe (low fidelity, just sketches of what your website might look like http://sneakpeekit.com/, https://balsamiq.cloud/ - paid)
- mockup (high fidelity, going into the future and taking a screenshot of your website)
- Look at some websites for inspiration then go to http://www.ui-patterns.com to look for


HTML Notes
- HTML file is the structure, you can make a website just with HTML code (though it might be plain)
- Hypertext markup language.
- specify layout and structure using html tags.
- codepen.io (no sign ups required)
- h1 to h6. How you know limit is at 6? Documentation. Read the html documentation.
- https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements
- https://www.w3schools.com/hTml/html_headings.asp
- https://devdocs.io/
- https://docs.emmet.io/cheat-sheet/
- UTF-8 rocks
- https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/
- Identation helps with readability
- one tag can have 1 id but multiple classes
- designing websites are like completing a puzzle with each piece being a different sized block.

Syntax of html tags
<start tag>content<closing tag> e.g. <h1>Hello world!</br>
<self closing tag> e.g. <br>, <hr> (horizontal rule)
<element attribute=""> e.g. <hr size="3" noshade>

CSS Notes
- https://colorhunt.co/ (colour schemes)
- https://developer.mozilla.org/en-US/docs/Web/CSS/color_value (common colour values)
- favicon.cc
- http://markusvogl.com/web1/interactive_box_model/css_box_demo.html (Margin vs Border vs Padding)
- https://www.w3schools.com/cssref/css_websafe_fonts.asp (what are safe fonts to use)
- https://www.cssfontstack.com/ (getting font usage)
- https://loremipsum.io/ (default text)
- https://www.flaticon.com/ (favicon)
- https://giphy.com/stickers (stickers come with transparent background)
- spans are like divs, they don't do very much unless used in conjection with CSS
- absolute position means relative to the parent's position (usually the page or the div the element is in).
- Note that your parent needs to have the position of relative otherwise it'll take the next parent which has it (usually the page)
- relative position means relative position from it's original position
- fixed position means fixed to the screen like a frozen header row in a table.
- when using inline display, you cannot specify the width and height
- if you change the width or height of blocks and you try to do text-align, it will fail. You should resort to using margin: auto.
- text-align: center should be used inside parent css.
- https://getbootstrap.com/docs/4.2/getting-started/introduction/ (bootstrap)
- https://fontawesome.com/ (icons)
- https://bootsnipp.com (snippets of code)
- things that come first in HTML will be at the back (in terms of z-index), needs the position property.
- inline style sheet > external style sheet (id > class > html tag) for css priority but avoid internal style sheets

Syntax of CSS
selector (i.e. tag) = who to change?
property = what to change
value = how to change?
selector {property: value;}

Media queries
@media <type> <feature>

Javascript Notes
- Inside the javscript console, under sources, find the snippets tab. In this tab you can easily write javascript code and run it as opposed to trying to write it in the console.
- document.querySelector works for html tags, classes (.className) and ids (#idName)
- can also combine multiple selectors in querySelector with space e.g. if you wanted a "a" tag inside the "li" tag, you can do document.querySelector("li a")
- similarly, if you wanted a li with a particular class, you can do document.querySelector("li.className")
- querySelector only returns the first element that matches the selector.
- querySelectorAll if you want multiple elements
- getElement(s)By[Id,Class,Tag etc.]
- https://www.w3schools.com/jsref/dom_obj_style.asp
- values in javascript have to be specified in string e.g. "10rem", "red"
- innerHtml gives you all inside the tag including other HTML tags.
- textContent only gives you the text.
- attributes, getAttribute() and setAttribute()
- https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
- anonymous function has no function name.
- sometimes if you passing function as callback, you just need to pass the name. If you add the parenthesis, it will be called when your code is run.
- Javascript has a debugger function. Put it before the function being called "debugger;"
- use classlist to add new class.
- figure out the differences between innerHTML, innerText, textContent (http://perfectionkills.com/the-poor-misunderstood-innerText/)
- If using es6 stuff e.g. const and linter keeps prompting you, just add this comment above "// jshint esversion:6"
- You can change stuff inside arrays and objects even though they are declared const. You just can't reassign it to something else.

JQuery Notes
- $ in jQuery = document.querySelector
- if you're going to use jquery inside your js file, you need to put your js scriptsrc b4 the js file otherwise it won't be able to understand stuff like $.
- if jquery src is in title with index.js, it might load the index.js first and not prompt an error so the way you fix it is by using $(document).ready(function(){ enter code here })
- you can avoid the problem above by simply putting the scriptsrc before the closing body tag.
- minifier.org
- shouldn't be changing css or adding new html tag inside javascript. Maybe you can use a custom class that you can toggle on and off if you want to change the css.

Node Notes
- https://nodejs.org/dist/latest-v11.x/docs/api/
- Node comes in with some default packages e.g. fs. Can see the above link to find out more.
- Can just type node in the terminal to open up javascript console.
- Can do "atom ." inside terminal and open atom with the corresponding project folder.
- Nodemon package https://github.com/remy/nodemon, install globally. use nodemon <server name> instead of node then you don't have to manually restart your server everytime.
- use body-parser package to parse the values in the post request.
- see app.js in Web-Development-Bootcamp for more info on how to set up bodyParser with express.
- if chaining multiple routes with app.route, the semi colon is used to indicate the end.

Application Programming Interface (API) Notes
- https://httpstatuses.com/
- use the request module to make get request to another server.
- JSON.stringify(js object)
- JSON.parse(string)
- res.send is the last thing you'd send to the browser, if you want to send multiple things, you have to use res.write.

Heroku / mailchimp
- You need 2 things for mail chimp, one is the list id and 2 is your api key.
- merge fields are custom fields like FNAME LNAME. See more in Newsletter-Signup/app.js.
- Define a Procfile (no extensions) to tell heroku what command to run when it's loaded.
- Log into Heroku using heroku login before you do heroku create then push the subtree.
- https://stackoverflow.com/questions/7539382/how-can-i-deploy-push-only-a-subdirectory-of-my-git-repo-to-heroku to push a subdirectory to heroku.
- https://devcenter.heroku.com/articles/preparing-a-codebase-for-heroku-deployment
- If you're unable to deploy to heroku, you have to update the heroku remote with the "heroku git:remote -a <name of server>" command. https://devcenter.heroku.com/articles/git#deploying-code

Templating
- ejs, google use ejs with express
- need a views folder
- see more notes inside todolist folder.
- use layouts for standardize design across multiple pages like headers and footers.

Modules
- https://nodejs.org/api/modules.html

Databases
- SQL vs NOSQL (Not only SQL) => relational vs non relational
- a lot of relationships = use SQL
- if it's like one to many e.g. 1 user makes a lot of posts, easier to map out using NOSQL
- nosql is more scalable than sql
- table (schema) structure vs document structure
- https://sqliteonline.com/

MongoDB
- https://docs.mongodb.com/guides/
- Use the quick start guide to install mongoDB.
- run mongod to start server
- run mongo to enter mongoDB shell
- use the help command in the mongoDB shell to show a list of all commands
- use <name of DB> to create a new DB, note that it won't appear when you run the "show dbs" command until it has some data in it.
- "db" to show current db
- collections are like tables in the SQL databases
- "show collections" command to show all collections
- "db.products.find({price: {$gt: 0.5}})" = find all documents where price is greater than 0.5
- {} is an empty document.
- When creating a new cluster in Atlus, don't forget to create a new admin user and whitelist all addresses.
- Can connect via the mongo shell (similar to ssh and running mongo)
- Need to also replace the connection string in your application

REST APIs
- REST is an architectural style, e.g. SOAP vs REST
- GET, POST, PUT, PATCH (NEW) AND DELETE - http verbs
- PUT vs PATCH = update entire entry vs update a particular field in that entry.
